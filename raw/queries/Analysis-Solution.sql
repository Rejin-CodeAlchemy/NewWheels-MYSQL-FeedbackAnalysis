
-- Find the total number of customers who have placed orders. What is the distribution of the customers across states?

SELECT 
    CASE
        WHEN ct.state IS NULL THEN 'Not Mentioned'
        ELSE ct.state
    END AS State,
    COUNT(DISTINCT ot.customer_id) AS Total_Customers
FROM
    order_t ot
        LEFT JOIN
    customer_t ct ON ot.customer_id = ct.customer_id
GROUP BY ct.state
ORDER BY Total_Customers DESC;

-- Which are the top 5 vehicle makers preferred by the customers?

SELECT 
    pt.vehicle_maker, COUNT(ot.customer_id) AS Total_Customers
FROM
    order_t ot
        JOIN
    product_t pt ON pt.product_id = ot.product_id
GROUP BY pt.vehicle_maker
ORDER BY Total_Customers DESC
LIMIT 5;

-- Which is the most preferred vehicle maker in each state?

SELECT *
FROM
(SELECT CASE WHEN ct.state IS NULL THEN 'Not Mentioned' ELSE ct.state END AS State,
pt.vehicle_maker,
COUNT(ot.customer_id) AS Total_Customers,
(RANK() OVER (PARTITION BY ct.state ORDER BY COUNT(ct.customer_id) DESC)) AS Ranking
FROM order_t ot
JOIN product_t pt ON pt.product_id = ot.product_id
LEFT JOIN customer_t ct ON ct.customer_id = ot.customer_id
GROUP BY pt.vehicle_maker, ct.state
ORDER BY Total_Customers DESC
)
WHERE Ranking = 1;

-- To display the Favorite vehicle_makers excluding state not mentioned:

SELECT *
FROM
(SELECT CASE WHEN ct.state IS NULL THEN 'Not Mentioned' ELSE ct.state END AS State,
pt.vehicle_maker,
COUNT(ot.customer_id) AS Total_Customers,
(RANK() OVER (PARTITION BY ct.state ORDER BY COUNT(ct.customer_id) DESC)) AS Ranking
FROM order_t ot
JOIN product_t pt ON pt.product_id = ot.product_id
LEFT JOIN customer_t ct ON ct.customer_id = ot.customer_id
GROUP BY pt.vehicle_maker, ct.state
ORDER BY Total_Customers DESC
) t
WHERE t.Ranking = 1 AND t.state <> 'Not Mentioned'

-- Find the overall average rating given by the customers. What is the average rating in each quarter? 
-- Consider the following mapping for ratings:
-- “Very Bad”: 1, “Bad”: 2, “Okay”: 3, “Good”: 4, “Very Good”: 5

SELECT 
    'Overall' AS Quarter,
    ROUND(AVG(customer_rating), 2) AS Average_Rating
FROM
    (SELECT 
        CASE
                WHEN customer_feedback = 'Very Bad' THEN 1
                WHEN customer_feedback = 'Bad' THEN 2
                WHEN customer_feedback = 'Okay' THEN 3
                WHEN customer_feedback = 'Good' THEN 4
                WHEN customer_feedback = 'Very Good' THEN 5
                ELSE 0
            END AS customer_rating,
            quarter_number
    FROM
        order_t) t 
UNION SELECT 
    ('Qtr ' || quarter_number) AS Quarter,
    ROUND(AVG(customer_rating), 2) AS Average_Rating
FROM
    (SELECT 
        CASE
                WHEN customer_feedback = 'Very Bad' THEN 1
                WHEN customer_feedback = 'Bad' THEN 2
                WHEN customer_feedback = 'Okay' THEN 3
                WHEN customer_feedback = 'Good' THEN 4
                WHEN customer_feedback = 'Very Good' THEN 5
                ELSE 0
            END AS customer_rating,
            quarter_number
    FROM
        order_t) tt
GROUP BY Quarter;

-- Find the percentage distribution of feedback from the customers. Are customers getting more dissatisfied over time?

SELECT 
    ('Qtr ' || quarter_number) AS Quarter,
    ROUND(SUM(CASE
                WHEN customer_feedback = 'Very Bad' THEN 1
                ELSE 0
            END) * 100.0 / COUNT(customer_feedback),
            2) AS Very_Bad_Rating,
    ROUND(SUM(CASE
                WHEN customer_feedback = 'Bad' THEN 1
                ELSE 0
            END) * 100.0 / COUNT(customer_feedback),
            2) AS Bad_Rating,
    ROUND(SUM(CASE
                WHEN customer_feedback = 'Okay' THEN 1
                ELSE 0
            END) * 100.0 / COUNT(customer_feedback),
            2) AS Okay_Rating,
    ROUND(SUM(CASE
                WHEN customer_feedback = 'Good' THEN 1
                ELSE 0
            END) * 100.0 / COUNT(customer_feedback),
            2) AS Good_Rating,
    ROUND(SUM(CASE
                WHEN customer_feedback = 'Very Good' THEN 1
                ELSE 0
            END) * 100.0 / COUNT(customer_feedback),
            2) AS Very_Good_Rating,
    ROUND(SUM(CASE
                WHEN customer_feedback NOT IN ('Very Bad' , 'Bad', 'Okay', 'Good', 'Very Good') THEN 1
                ELSE 0
            END) * 100.0 / COUNT(customer_feedback),
            2) AS NA_Rating
FROM
    order_t
GROUP BY Quarter
ORDER BY Quarter;

-- What is the trend of the number of orders by quarter? 

SELECT 
    ('Qtr ' || quarter_number) AS Quarter,
    COUNT(order_id) AS Total_Orders
FROM
    order_t
GROUP BY Quarter
ORDER BY Quarter;

-- Calculate the net revenue generated by the company. What is the quarter-over-quarter % change in net revenue? 

SELECT ('Qtr ' || quarter_number) AS Quarter,
Curr_Net_Revenue,
Prev_Net_Revenue,
CASE WHEN Prev_Net_Revenue = 'NA' THEN 'NA'
ELSE ROUND((Curr_Net_Revenue - Prev_Net_Revenue)*100.0/Curr_Net_Revenue,2)
END AS 'QoQ_%Revenue_Change'
FROM
(
SELECT quarter_number,
ROUND(SUM(((100 - discount)*vehicle_price*quantity)),2) AS Curr_Net_Revenue,
CASE WHEN LAG(ROUND(SUM(((100 - discount)*vehicle_price*quantity)),2)) OVER (ORDER BY quarter_number) IS NULL THEN 'NA'
ELSE LAG(ROUND(SUM(((100 - discount)*vehicle_price*quantity)),2)) OVER (ORDER BY quarter_number)
END AS Prev_Net_Revenue
FROM order_t
WHERE
vehicle_price IS NOT NULL
AND quantity IS NOT NULL
AND discount IS NOT NULL
GROUP BY quarter_number
);

-- Using CTE

 WITH Quarterly_Revenue AS (
 SELECT quarter_number,
 ROUND(SUM(((100 - discount)*vehicle_price*quantity)),2) AS CURR_NET_REVENUE,
 LAG(ROUND(SUM(((100 - discount)*vehicle_price*quantity)),2)) OVER (ORDER BY quarter_number) AS PREV_NET_REVENUE
 FROM order_t
 WHERE
     vehicle_price IS NOT NULL 
     AND quantity IS NOT NULL
     AND discount IS NOT NULL
 GROUP BY quarter_number
 )
SELECT 
    quarter_number,
    CURR_NET_REVENUE,
    PREV_NET_REVENUE,
    CASE
        WHEN
            PREV_NET_REVENUE IS NOT NULL
        THEN
            ROUND((CURR_NET_REVENUE - PREV_NET_REVENUE) * 100.0 / CURR_NET_REVENUE,
                    2)
        ELSE NULL
    END AS Q_TO_Q_CHANGE_NET_REVENUE
FROM
    Quarterly_Revenue;

-- What is the trend of net revenue and orders by quarters?

SELECT 
    ('Qtr ' || quarter_number) AS Quarter,
    ROUND(SUM(((100 - discount) * vehicle_price * quantity)),
            2) AS Net_Revenue,
    COUNT(order_id) AS Total_Orders
FROM
    order_t
WHERE
    vehicle_price IS NOT NULL
        AND quantity IS NOT NULL
        AND discount IS NOT NULL
GROUP BY Quarter
ORDER BY Quarter;

-- What is the average discount offered for different types of credit cards? 

SELECT 
    ct.credit_card_type,
    ROUND(AVG(ot.discount), 2) AS 'Average_Discount%'
FROM
    order_t ot
        JOIN
    customer_t ct ON ot.customer_id = ct.customer_id
GROUP BY ct.credit_card_type
ORDER BY 'Average_Discount%' DESC;

-- What is the average time taken to ship the placed orders for each quarter? [3 marks]

SELECT 
    ('Qtr ' || quarter_number) AS Quarter,
    ROUND(AVG(JULIANDAY(ship_date) - JULIANDAY(order_date)),
            2) AS Average_Ship_Time
FROM
    order_t
WHERE
    ship_date IS NOT NULL
        AND order_date IS NOT NULL
GROUP BY Quarter
ORDER BY Quarter;

-- Total Orders
SELECT 
    COUNT(order_id) AS 'Total Order'
FROM
    order_t;

-- Average Days to Ship

SELECT 
    ROUND(AVG(JULIANDAY(ship_date) - JULIANDAY(order_date)),
            2) AS 'Average Days to Ship'
FROM
    order_t
WHERE
    ship_date IS NOT NULL
        AND order_date IS NOT NULL;

-- Total Countries

SELECT DISTINCT
    country
FROM
    customer_t;

-- Revenue

SELECT 
    ROUND(SUM(((100-discount)*vehicle_price*quantity)),2) AS 'Total Revenue',
    COUNT(order_id) AS Total_Orders
FROM order_t
WHERE
    vehicle_price IS NOT NULL 
    AND quantity IS NOT NULL
    AND discount IS NOT NULL;

-- Total Good Feedback %

SELECT (SUM(CASE WHEN customer_feedback IN ( 'Good' ,'Very Good') THEN 1
        ELSE 0
        END)/(COUNT(order_id) +0.0)*100.0) AS '%_Good_rating'
FROM order_t;